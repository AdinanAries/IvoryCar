"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var JSON_CONTENT_TYPES = ['application/json', 'application/vnd.amadeus+json'];
/**
 * The response object returned for every API call.
 *
 * @param {Object} http_response the response object returned from the Node/HTTP
 *  request
 * @param {Request} request the request object used to make this API call
 *
 * @property {number} statusCode the HTTP status code for the response, if any
 * @property {string} body the raw body received from the API
 * @property {Object} result the parsed JSON received from the API
 * @property {Object} data the data attribute taken from the result
 * @property {boolean} parsed wether the raw body has been parsed into JSON
 * @property {Request} request the request object used to make this API call
 *
 */

var Response =
/*#__PURE__*/
function () {
  function Response(http_response, request) {
    _classCallCheck(this, Response);

    this.headers = http_response.headers || {};
    this.statusCode = http_response.statusCode;
    this.request = request;
    this.body = '';
    this.result = null;
    this.data = null;
    this.parsed = false;
  } // PROTECTED

  /**
   * Add a chunk received from the API to the body
   *
   * @param  {string} chunk a chunk of data
   * @protected
   */


  _createClass(Response, [{
    key: "addChunk",
    value: function addChunk(chunk) {
      this.body += chunk;
    }
    /**
     * Tries to parse parse the raw data
     * @protected
     */

  }, {
    key: "parse",
    value: function parse() {
      try {
        if (this.isJson()) {
          this.result = JSON.parse(this.body);
          this.data = this.result.data;
          this.parsed = true;
        } else {
          this.parsed = false;
        }
      } catch (SyntaxError) {
        this.parsed = false;
      }
    }
    /**
     * Wether this API call can be considered a success. Used to wrap the response
     * into a ResponseError
     *
     * @return {boolean}
     * @protected
     */

  }, {
    key: "success",
    value: function success() {
      return this.parsed && this.statusCode < 300;
    } // PRIVATE

    /**
     * Tests if the content is seemingly JSON
     *
     * @return {boolean}
     * @private
     */

  }, {
    key: "isJson",
    value: function isJson() {
      return JSON_CONTENT_TYPES.indexOf(this.headers['content-type']) !== -1;
    }
  }]);

  return Response;
}();

var _default = Response;
exports["default"] = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbWFkZXVzL2NsaWVudC9yZXNwb25zZS5qcyJdLCJuYW1lcyI6WyJKU09OX0NPTlRFTlRfVFlQRVMiLCJSZXNwb25zZSIsImh0dHBfcmVzcG9uc2UiLCJyZXF1ZXN0IiwiaGVhZGVycyIsInN0YXR1c0NvZGUiLCJib2R5IiwicmVzdWx0IiwiZGF0YSIsInBhcnNlZCIsImNodW5rIiwiaXNKc29uIiwiSlNPTiIsInBhcnNlIiwiU3ludGF4RXJyb3IiLCJpbmRleE9mIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsa0JBQWtCLEdBQUcsQ0FBQyxrQkFBRCxFQUFxQiw4QkFBckIsQ0FBekI7QUFFQTs7Ozs7Ozs7Ozs7Ozs7OztJQWVNQyxROzs7QUFDSixvQkFBWUMsYUFBWixFQUEyQkMsT0FBM0IsRUFBb0M7QUFBQTs7QUFDbEMsU0FBS0MsT0FBTCxHQUFlRixhQUFhLENBQUNFLE9BQWQsSUFBeUIsRUFBeEM7QUFDQSxTQUFLQyxVQUFMLEdBQW1CSCxhQUFhLENBQUNHLFVBQWpDO0FBQ0EsU0FBS0YsT0FBTCxHQUFtQkEsT0FBbkI7QUFDQSxTQUFLRyxJQUFMLEdBQW1CLEVBQW5CO0FBQ0EsU0FBS0MsTUFBTCxHQUFtQixJQUFuQjtBQUNBLFNBQUtDLElBQUwsR0FBbUIsSUFBbkI7QUFDQSxTQUFLQyxNQUFMLEdBQW1CLEtBQW5CO0FBQ0QsRyxDQUVEOztBQUVBOzs7Ozs7Ozs7OzZCQU1TQyxLLEVBQU87QUFDZCxXQUFLSixJQUFMLElBQWFJLEtBQWI7QUFDRDtBQUdEOzs7Ozs7OzRCQUlRO0FBQ04sVUFBSTtBQUNGLFlBQUksS0FBS0MsTUFBTCxFQUFKLEVBQW1CO0FBQ2pCLGVBQUtKLE1BQUwsR0FBY0ssSUFBSSxDQUFDQyxLQUFMLENBQVcsS0FBS1AsSUFBaEIsQ0FBZDtBQUNBLGVBQUtFLElBQUwsR0FBWSxLQUFLRCxNQUFMLENBQVlDLElBQXhCO0FBQ0EsZUFBS0MsTUFBTCxHQUFjLElBQWQ7QUFDRCxTQUpELE1BSU87QUFDTCxlQUFLQSxNQUFMLEdBQWMsS0FBZDtBQUNEO0FBQ0YsT0FSRCxDQVFFLE9BQU9LLFdBQVAsRUFBb0I7QUFDcEIsYUFBS0wsTUFBTCxHQUFjLEtBQWQ7QUFDRDtBQUNGO0FBRUQ7Ozs7Ozs7Ozs7OEJBT1U7QUFDUixhQUFRLEtBQUtBLE1BQUwsSUFBZSxLQUFLSixVQUFMLEdBQWtCLEdBQXpDO0FBQ0QsSyxDQUVEOztBQUdBOzs7Ozs7Ozs7NkJBTVM7QUFDUCxhQUFRTCxrQkFBa0IsQ0FBQ2UsT0FBbkIsQ0FBMkIsS0FBS1gsT0FBTCxDQUFhLGNBQWIsQ0FBM0IsTUFBNkQsQ0FBQyxDQUF0RTtBQUNEOzs7Ozs7ZUFHWUgsUSIsInNvdXJjZXNDb250ZW50IjpbImxldCBKU09OX0NPTlRFTlRfVFlQRVMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nLCAnYXBwbGljYXRpb24vdm5kLmFtYWRldXMranNvbiddO1xuXG4vKipcbiAqIFRoZSByZXNwb25zZSBvYmplY3QgcmV0dXJuZWQgZm9yIGV2ZXJ5IEFQSSBjYWxsLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBodHRwX3Jlc3BvbnNlIHRoZSByZXNwb25zZSBvYmplY3QgcmV0dXJuZWQgZnJvbSB0aGUgTm9kZS9IVFRQXG4gKiAgcmVxdWVzdFxuICogQHBhcmFtIHtSZXF1ZXN0fSByZXF1ZXN0IHRoZSByZXF1ZXN0IG9iamVjdCB1c2VkIHRvIG1ha2UgdGhpcyBBUEkgY2FsbFxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzdGF0dXNDb2RlIHRoZSBIVFRQIHN0YXR1cyBjb2RlIGZvciB0aGUgcmVzcG9uc2UsIGlmIGFueVxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJvZHkgdGhlIHJhdyBib2R5IHJlY2VpdmVkIGZyb20gdGhlIEFQSVxuICogQHByb3BlcnR5IHtPYmplY3R9IHJlc3VsdCB0aGUgcGFyc2VkIEpTT04gcmVjZWl2ZWQgZnJvbSB0aGUgQVBJXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YSB0aGUgZGF0YSBhdHRyaWJ1dGUgdGFrZW4gZnJvbSB0aGUgcmVzdWx0XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHBhcnNlZCB3ZXRoZXIgdGhlIHJhdyBib2R5IGhhcyBiZWVuIHBhcnNlZCBpbnRvIEpTT05cbiAqIEBwcm9wZXJ0eSB7UmVxdWVzdH0gcmVxdWVzdCB0aGUgcmVxdWVzdCBvYmplY3QgdXNlZCB0byBtYWtlIHRoaXMgQVBJIGNhbGxcbiAqXG4gKi9cbmNsYXNzIFJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3IoaHR0cF9yZXNwb25zZSwgcmVxdWVzdCkge1xuICAgIHRoaXMuaGVhZGVycyA9IGh0dHBfcmVzcG9uc2UuaGVhZGVycyB8fCB7fTtcbiAgICB0aGlzLnN0YXR1c0NvZGUgID0gaHR0cF9yZXNwb25zZS5zdGF0dXNDb2RlO1xuICAgIHRoaXMucmVxdWVzdCAgICAgPSByZXF1ZXN0O1xuICAgIHRoaXMuYm9keSAgICAgICAgPSAnJztcbiAgICB0aGlzLnJlc3VsdCAgICAgID0gbnVsbDtcbiAgICB0aGlzLmRhdGEgICAgICAgID0gbnVsbDtcbiAgICB0aGlzLnBhcnNlZCAgICAgID0gZmFsc2U7XG4gIH1cblxuICAvLyBQUk9URUNURURcblxuICAvKipcbiAgICogQWRkIGEgY2h1bmsgcmVjZWl2ZWQgZnJvbSB0aGUgQVBJIHRvIHRoZSBib2R5XG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ30gY2h1bmsgYSBjaHVuayBvZiBkYXRhXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGFkZENodW5rKGNodW5rKSB7XG4gICAgdGhpcy5ib2R5ICs9IGNodW5rO1xuICB9XG5cblxuICAvKipcbiAgICogVHJpZXMgdG8gcGFyc2UgcGFyc2UgdGhlIHJhdyBkYXRhXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHBhcnNlKCkge1xuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5pc0pzb24oKSkge1xuICAgICAgICB0aGlzLnJlc3VsdCA9IEpTT04ucGFyc2UodGhpcy5ib2R5KTtcbiAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5yZXN1bHQuZGF0YTtcbiAgICAgICAgdGhpcy5wYXJzZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wYXJzZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChTeW50YXhFcnJvcikge1xuICAgICAgdGhpcy5wYXJzZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV2V0aGVyIHRoaXMgQVBJIGNhbGwgY2FuIGJlIGNvbnNpZGVyZWQgYSBzdWNjZXNzLiBVc2VkIHRvIHdyYXAgdGhlIHJlc3BvbnNlXG4gICAqIGludG8gYSBSZXNwb25zZUVycm9yXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHN1Y2Nlc3MoKSB7XG4gICAgcmV0dXJuICh0aGlzLnBhcnNlZCAmJiB0aGlzLnN0YXR1c0NvZGUgPCAzMDApO1xuICB9XG5cbiAgLy8gUFJJVkFURVxuXG5cbiAgLyoqXG4gICAqIFRlc3RzIGlmIHRoZSBjb250ZW50IGlzIHNlZW1pbmdseSBKU09OXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0pzb24oKSB7XG4gICAgcmV0dXJuIChKU09OX0NPTlRFTlRfVFlQRVMuaW5kZXhPZih0aGlzLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddKSAhPT0gLTEpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlc3BvbnNlO1xuIl19
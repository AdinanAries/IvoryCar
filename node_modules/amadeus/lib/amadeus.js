"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _client = _interopRequireDefault(require("./amadeus/client"));

var _pagination = _interopRequireDefault(require("./amadeus/client/pagination"));

var _reference_data = _interopRequireDefault(require("./amadeus/namespaces/reference_data"));

var _shopping = _interopRequireDefault(require("./amadeus/namespaces/shopping"));

var _booking = _interopRequireDefault(require("./amadeus/namespaces/booking"));

var _travel = _interopRequireDefault(require("./amadeus/namespaces/travel"));

var _e_reputation = _interopRequireDefault(require("./amadeus/namespaces/e_reputation"));

var _media = _interopRequireDefault(require("./amadeus/namespaces/media"));

var _airport = _interopRequireDefault(require("./amadeus/namespaces/airport"));

var _safety = _interopRequireDefault(require("./amadeus/namespaces/safety"));

var _schedule = _interopRequireDefault(require("./amadeus/namespaces/schedule"));

var _analytics = _interopRequireDefault(require("./amadeus/namespaces/analytics"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The Amadeus client library for accessing the travel APIs.
 *
 * Initialize using your credentials:
 *
 * ```js
 * var Amadeus = require('amadeus');
 * var amadeus = new Amadeus({
 *     clientId:    'YOUR_CLIENT_ID',
 *     clientSecret: 'YOUR_CLIENT_SECRET'
 * });
 * ```
 *
 * Alternatively, initialize the library using
 * the environment variables `AMADEUS_CLIENT_ID`
 * and `AMADEUS_CLIENT_SECRET`
 *
 * ```js
 * var amadeus = new Amadeus();
 * ```
 *
 * @param {Object} params
 * @param {string} params.clientId the API key used to authenticate the API
 * @param {string} params.clientSecret the API secret used to authenticate
 *  the API
 * @param {Object} [params.logger=console] a `console`-compatible logger that
 *  accepts `log`, `error` and `debug` calls.
 * @param {string} [params.logLevel='warn'] the log level for the client,
 *  available options are `debug`, `warn`, and `silent`
 * @param {string} [params.hostname='production'] the name of the server API
 *  calls are made to (`production` or `test`)
 * @param {string} [params.host] the full domain or IP for a server to make the
 *  API clal to. Only use this if you don't want to use the provided servers
 * @param {boolean} [params.ssl=true] wether to use SSL for this API call
 * @param {number} [params.port=443] the port to make the API call to
 * @param {string} [params.customAppId=null] a custom App ID to be passed in
 * the User Agent to the server.
 * @param {string} [params.customAppVersion=null] a custom App Version number to
 * be passed in the User Agent to the server.
 * @param {Object} [params.http=https] an optional Node/HTTP(S)-compatible client
 *  that accepts a 'request()' call with an array of options.
 *
 * @property {Client} client The client for making authenticated HTTP calls
 * @property {number} version The version of this API client
 */
var Amadeus =
/*#__PURE__*/
function () {
  function Amadeus() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Amadeus);

    this.client = new _client["default"](params);
    this.version = this.client.version;
    this.referenceData = new _reference_data["default"](this.client);
    this.shopping = new _shopping["default"](this.client);
    this.booking = new _booking["default"](this.client);
    this.travel = new _travel["default"](this.client);
    this.eReputation = new _e_reputation["default"](this.client);
    this.media = new _media["default"](this.client);
    this.airport = new _airport["default"](this.client);
    this.pagination = new _pagination["default"](this.client);
    this.safety = new _safety["default"](this.client);
    this.schedule = new _schedule["default"](this.client);
    this.analytics = new _analytics["default"](this.client);
  }
  /**
   * The previous page for the given response. Resolves to null if the page
   * could not be found.
   *
   * ```js
   * amadeus.referenceData.locations.get({
   *   keyword: 'LON',
   *   subType: 'AIRPORT,CITY',
   *   page: { offset: 2 }
   * }).then(function(response){
   *   console.log(response);
   *   return amadeus.previous(response);
   * }).then(function(previousPage){
   *   console.log(previousPage);
   * });
   * ```
   *
   * @param response the previous response for an API call
   * @return {Promise.<Response,ResponseError>} a Bluebird Promise
   */


  _createClass(Amadeus, [{
    key: "previous",
    value: function previous(response) {
      return this.pagination.page('previous', response);
    }
    /**
     * The next page for the given response. Resolves to null if the page could
     * not be found.
     *
     * ```js
     * amadeus.referenceData.locations.get({
     *   keyword: 'LON',
     *   subType: 'AIRPORT,CITY'
     * }).then(function(response){
     *   console.log(response);
     *   return amadeus.next(response);
     * }).then(function(nextPage){
     *   console.log(nextPage);
     * });
     * ```
     *
     * @param response the previous response for an API call
     * @return {Promise.<Response,ResponseError>} a Bluebird Promise
     */

  }, {
    key: "next",
    value: function next(response) {
      return this.pagination.page('next', response);
    }
    /**
     * The first page for the given response. Resolves to null if the page
     * could not be found.
     *
     * ```js
     * amadeus.referenceData.locations.get({
     *   keyword: 'LON',
     *   subType: 'AIRPORT,CITY',
     *   page: { offset: 2 }
     * }).then(function(response){
     *   console.log(response);
     *   return amadeus.first(response);
     * }).then(function(firstPage){
     *   console.log(firstPage);
     * });
     * ```
     *
     * @param response the previous response for an API call
     * @return {Promise.<Response,ResponseError>} a Bluebird Promise
     */

  }, {
    key: "first",
    value: function first(response) {
      return this.pagination.page('first', response);
    }
    /**
     * The last page for the given response. Resolves to null if the page
     * could not be found.
     *
     * ```js
     * amadeus.referenceData.locations.get({
     *   keyword: 'LON',
     *   subType: 'AIRPORT,CITY'
     * }).then(function(response){
     *   console.log(response);
     *   return amadeus.last(response);
     * }).then(function(lastPage){
     *   console.log(lastPage);
     * });
     * ```
     *
     * @param response the previous response for an API call
     * @return {Promise.<Response,ResponseError>} a Bluebird Promise
     */

  }, {
    key: "last",
    value: function last(response) {
      return this.pagination.page('last', response);
    }
  }]);

  return Amadeus;
}();
/**
 * A handy list of location types, to be used in the locations API:
 *
 * ```js
 * amadeus.referenceData.location.get({
 *   keyword: 'lon',
 *   subType: Amadeus.location.any
 * });
 * ```
 *
 * Currently available are the types `.airport`, `.city`, and `.any`
 */


Amadeus.location = {
  airport: 'AIRPORT',
  city: 'CITY',
  any: 'AIRPORT,CITY'
};
/**
 * A handy list of direction types, to be used in the Flight Busiest Period API:
 *
 * ```js
 * amadeus.travel.analytics.airTraffic.busiestPeriod.get({
 *   cityCode: 'par',
 *   perdiod: 2015,
 *   direction: Amadeus.direction.arriving
 * });
 * ```
 *
 * Currently available are the types `.arriving` and `.departing`
 */

Amadeus.direction = {
  arriving: 'ARRIVING',
  departing: 'DEPARTING'
};
var _default = Amadeus;
exports["default"] = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hbWFkZXVzLmpzIl0sIm5hbWVzIjpbIkFtYWRldXMiLCJwYXJhbXMiLCJjbGllbnQiLCJDbGllbnQiLCJ2ZXJzaW9uIiwicmVmZXJlbmNlRGF0YSIsIlJlZmVyZW5jZURhdGEiLCJzaG9wcGluZyIsIlNob3BwaW5nIiwiYm9va2luZyIsIkJvb2tpbmciLCJ0cmF2ZWwiLCJUcmF2ZWwiLCJlUmVwdXRhdGlvbiIsIkVSZXB1dGF0aW9uIiwibWVkaWEiLCJNZWRpYSIsImFpcnBvcnQiLCJBaXJwb3J0IiwicGFnaW5hdGlvbiIsIlBhZ2luYXRpb24iLCJzYWZldHkiLCJTYWZldHkiLCJzY2hlZHVsZSIsIlNjaGVkdWxlIiwiYW5hbHl0aWNzIiwiQW5hbHl0aWNzIiwicmVzcG9uc2UiLCJwYWdlIiwibG9jYXRpb24iLCJjaXR5IiwiYW55IiwiZGlyZWN0aW9uIiwiYXJyaXZpbmciLCJkZXBhcnRpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7OztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUE2Q01BLE87OztBQUNKLHFCQUF5QjtBQUFBLFFBQWJDLE1BQWEsdUVBQUosRUFBSTs7QUFBQTs7QUFDdkIsU0FBS0MsTUFBTCxHQUFjLElBQUlDLGtCQUFKLENBQVdGLE1BQVgsQ0FBZDtBQUNBLFNBQUtHLE9BQUwsR0FBZSxLQUFLRixNQUFMLENBQVlFLE9BQTNCO0FBRUEsU0FBS0MsYUFBTCxHQUFzQixJQUFJQywwQkFBSixDQUFrQixLQUFLSixNQUF2QixDQUF0QjtBQUNBLFNBQUtLLFFBQUwsR0FBc0IsSUFBSUMsb0JBQUosQ0FBYSxLQUFLTixNQUFsQixDQUF0QjtBQUNBLFNBQUtPLE9BQUwsR0FBc0IsSUFBSUMsbUJBQUosQ0FBWSxLQUFLUixNQUFqQixDQUF0QjtBQUNBLFNBQUtTLE1BQUwsR0FBc0IsSUFBSUMsa0JBQUosQ0FBVyxLQUFLVixNQUFoQixDQUF0QjtBQUNBLFNBQUtXLFdBQUwsR0FBc0IsSUFBSUMsd0JBQUosQ0FBZ0IsS0FBS1osTUFBckIsQ0FBdEI7QUFDQSxTQUFLYSxLQUFMLEdBQXNCLElBQUlDLGlCQUFKLENBQVUsS0FBS2QsTUFBZixDQUF0QjtBQUNBLFNBQUtlLE9BQUwsR0FBc0IsSUFBSUMsbUJBQUosQ0FBWSxLQUFLaEIsTUFBakIsQ0FBdEI7QUFDQSxTQUFLaUIsVUFBTCxHQUFzQixJQUFJQyxzQkFBSixDQUFlLEtBQUtsQixNQUFwQixDQUF0QjtBQUNBLFNBQUttQixNQUFMLEdBQXNCLElBQUlDLGtCQUFKLENBQVcsS0FBS3BCLE1BQWhCLENBQXRCO0FBQ0EsU0FBS3FCLFFBQUwsR0FBc0IsSUFBSUMsb0JBQUosQ0FBYSxLQUFLdEIsTUFBbEIsQ0FBdEI7QUFDQSxTQUFLdUIsU0FBTCxHQUFzQixJQUFJQyxxQkFBSixDQUFjLEtBQUt4QixNQUFuQixDQUF0QjtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFvQlN5QixRLEVBQVU7QUFBRSxhQUFPLEtBQUtSLFVBQUwsQ0FBZ0JTLElBQWhCLENBQXFCLFVBQXJCLEVBQWlDRCxRQUFqQyxDQUFQO0FBQW9EO0FBRXpFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQW1CS0EsUSxFQUFjO0FBQUUsYUFBTyxLQUFLUixVQUFMLENBQWdCUyxJQUFoQixDQUFxQixNQUFyQixFQUE2QkQsUUFBN0IsQ0FBUDtBQUFnRDtBQUVyRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBb0JNQSxRLEVBQWE7QUFBRSxhQUFPLEtBQUtSLFVBQUwsQ0FBZ0JTLElBQWhCLENBQXFCLE9BQXJCLEVBQThCRCxRQUE5QixDQUFQO0FBQWlEO0FBRXRFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQW1CS0EsUSxFQUFjO0FBQUUsYUFBTyxLQUFLUixVQUFMLENBQWdCUyxJQUFoQixDQUFxQixNQUFyQixFQUE2QkQsUUFBN0IsQ0FBUDtBQUFnRDs7Ozs7QUFJdkU7Ozs7Ozs7Ozs7Ozs7O0FBWUEzQixPQUFPLENBQUM2QixRQUFSLEdBQW1CO0FBQ2pCWixFQUFBQSxPQUFPLEVBQUUsU0FEUTtBQUVqQmEsRUFBQUEsSUFBSSxFQUFFLE1BRlc7QUFHakJDLEVBQUFBLEdBQUcsRUFBRTtBQUhZLENBQW5CO0FBTUE7Ozs7Ozs7Ozs7Ozs7O0FBY0EvQixPQUFPLENBQUNnQyxTQUFSLEdBQW9CO0FBQ2xCQyxFQUFBQSxRQUFRLEVBQUUsVUFEUTtBQUVsQkMsRUFBQUEsU0FBUyxFQUFFO0FBRk8sQ0FBcEI7ZUFLZWxDLE8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2xpZW50ICAgICAgICBmcm9tICcuL2FtYWRldXMvY2xpZW50JztcbmltcG9ydCBQYWdpbmF0aW9uICAgIGZyb20gJy4vYW1hZGV1cy9jbGllbnQvcGFnaW5hdGlvbic7XG5cbmltcG9ydCBSZWZlcmVuY2VEYXRhIGZyb20gJy4vYW1hZGV1cy9uYW1lc3BhY2VzL3JlZmVyZW5jZV9kYXRhJztcbmltcG9ydCBTaG9wcGluZyAgICAgIGZyb20gJy4vYW1hZGV1cy9uYW1lc3BhY2VzL3Nob3BwaW5nJztcbmltcG9ydCBCb29raW5nICAgICAgIGZyb20gJy4vYW1hZGV1cy9uYW1lc3BhY2VzL2Jvb2tpbmcnO1xuaW1wb3J0IFRyYXZlbCAgICAgICAgZnJvbSAnLi9hbWFkZXVzL25hbWVzcGFjZXMvdHJhdmVsJztcbmltcG9ydCBFUmVwdXRhdGlvbiAgIGZyb20gJy4vYW1hZGV1cy9uYW1lc3BhY2VzL2VfcmVwdXRhdGlvbic7XG5pbXBvcnQgTWVkaWEgICAgICAgICBmcm9tICcuL2FtYWRldXMvbmFtZXNwYWNlcy9tZWRpYSc7XG5pbXBvcnQgQWlycG9ydCAgICAgICBmcm9tICcuL2FtYWRldXMvbmFtZXNwYWNlcy9haXJwb3J0JztcbmltcG9ydCBTYWZldHkgICAgICAgIGZyb20gJy4vYW1hZGV1cy9uYW1lc3BhY2VzL3NhZmV0eSc7XG5pbXBvcnQgU2NoZWR1bGUgICAgICBmcm9tICcuL2FtYWRldXMvbmFtZXNwYWNlcy9zY2hlZHVsZSc7XG5pbXBvcnQgQW5hbHl0aWNzICAgICBmcm9tICcuL2FtYWRldXMvbmFtZXNwYWNlcy9hbmFseXRpY3MnO1xuXG5cbi8qKlxuICogVGhlIEFtYWRldXMgY2xpZW50IGxpYnJhcnkgZm9yIGFjY2Vzc2luZyB0aGUgdHJhdmVsIEFQSXMuXG4gKlxuICogSW5pdGlhbGl6ZSB1c2luZyB5b3VyIGNyZWRlbnRpYWxzOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgQW1hZGV1cyA9IHJlcXVpcmUoJ2FtYWRldXMnKTtcbiAqIHZhciBhbWFkZXVzID0gbmV3IEFtYWRldXMoe1xuICogICAgIGNsaWVudElkOiAgICAnWU9VUl9DTElFTlRfSUQnLFxuICogICAgIGNsaWVudFNlY3JldDogJ1lPVVJfQ0xJRU5UX1NFQ1JFVCdcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQWx0ZXJuYXRpdmVseSwgaW5pdGlhbGl6ZSB0aGUgbGlicmFyeSB1c2luZ1xuICogdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcyBgQU1BREVVU19DTElFTlRfSURgXG4gKiBhbmQgYEFNQURFVVNfQ0xJRU5UX1NFQ1JFVGBcbiAqXG4gKiBgYGBqc1xuICogdmFyIGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5jbGllbnRJZCB0aGUgQVBJIGtleSB1c2VkIHRvIGF1dGhlbnRpY2F0ZSB0aGUgQVBJXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmNsaWVudFNlY3JldCB0aGUgQVBJIHNlY3JldCB1c2VkIHRvIGF1dGhlbnRpY2F0ZVxuICogIHRoZSBBUElcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1zLmxvZ2dlcj1jb25zb2xlXSBhIGBjb25zb2xlYC1jb21wYXRpYmxlIGxvZ2dlciB0aGF0XG4gKiAgYWNjZXB0cyBgbG9nYCwgYGVycm9yYCBhbmQgYGRlYnVnYCBjYWxscy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLmxvZ0xldmVsPSd3YXJuJ10gdGhlIGxvZyBsZXZlbCBmb3IgdGhlIGNsaWVudCxcbiAqICBhdmFpbGFibGUgb3B0aW9ucyBhcmUgYGRlYnVnYCwgYHdhcm5gLCBhbmQgYHNpbGVudGBcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLmhvc3RuYW1lPSdwcm9kdWN0aW9uJ10gdGhlIG5hbWUgb2YgdGhlIHNlcnZlciBBUElcbiAqICBjYWxscyBhcmUgbWFkZSB0byAoYHByb2R1Y3Rpb25gIG9yIGB0ZXN0YClcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLmhvc3RdIHRoZSBmdWxsIGRvbWFpbiBvciBJUCBmb3IgYSBzZXJ2ZXIgdG8gbWFrZSB0aGVcbiAqICBBUEkgY2xhbCB0by4gT25seSB1c2UgdGhpcyBpZiB5b3UgZG9uJ3Qgd2FudCB0byB1c2UgdGhlIHByb3ZpZGVkIHNlcnZlcnNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmFtcy5zc2w9dHJ1ZV0gd2V0aGVyIHRvIHVzZSBTU0wgZm9yIHRoaXMgQVBJIGNhbGxcbiAqIEBwYXJhbSB7bnVtYmVyfSBbcGFyYW1zLnBvcnQ9NDQzXSB0aGUgcG9ydCB0byBtYWtlIHRoZSBBUEkgY2FsbCB0b1xuICogQHBhcmFtIHtzdHJpbmd9IFtwYXJhbXMuY3VzdG9tQXBwSWQ9bnVsbF0gYSBjdXN0b20gQXBwIElEIHRvIGJlIHBhc3NlZCBpblxuICogdGhlIFVzZXIgQWdlbnQgdG8gdGhlIHNlcnZlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLmN1c3RvbUFwcFZlcnNpb249bnVsbF0gYSBjdXN0b20gQXBwIFZlcnNpb24gbnVtYmVyIHRvXG4gKiBiZSBwYXNzZWQgaW4gdGhlIFVzZXIgQWdlbnQgdG8gdGhlIHNlcnZlci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1zLmh0dHA9aHR0cHNdIGFuIG9wdGlvbmFsIE5vZGUvSFRUUChTKS1jb21wYXRpYmxlIGNsaWVudFxuICogIHRoYXQgYWNjZXB0cyBhICdyZXF1ZXN0KCknIGNhbGwgd2l0aCBhbiBhcnJheSBvZiBvcHRpb25zLlxuICpcbiAqIEBwcm9wZXJ0eSB7Q2xpZW50fSBjbGllbnQgVGhlIGNsaWVudCBmb3IgbWFraW5nIGF1dGhlbnRpY2F0ZWQgSFRUUCBjYWxsc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHZlcnNpb24gVGhlIHZlcnNpb24gb2YgdGhpcyBBUEkgY2xpZW50XG4gKi9cbmNsYXNzIEFtYWRldXMge1xuICBjb25zdHJ1Y3RvcihwYXJhbXMgPSB7fSkge1xuICAgIHRoaXMuY2xpZW50ID0gbmV3IENsaWVudChwYXJhbXMpO1xuICAgIHRoaXMudmVyc2lvbiA9IHRoaXMuY2xpZW50LnZlcnNpb247XG5cbiAgICB0aGlzLnJlZmVyZW5jZURhdGEgID0gbmV3IFJlZmVyZW5jZURhdGEodGhpcy5jbGllbnQpO1xuICAgIHRoaXMuc2hvcHBpbmcgICAgICAgPSBuZXcgU2hvcHBpbmcodGhpcy5jbGllbnQpO1xuICAgIHRoaXMuYm9va2luZyAgICAgICAgPSBuZXcgQm9va2luZyh0aGlzLmNsaWVudCk7XG4gICAgdGhpcy50cmF2ZWwgICAgICAgICA9IG5ldyBUcmF2ZWwodGhpcy5jbGllbnQpO1xuICAgIHRoaXMuZVJlcHV0YXRpb24gICAgPSBuZXcgRVJlcHV0YXRpb24odGhpcy5jbGllbnQpO1xuICAgIHRoaXMubWVkaWEgICAgICAgICAgPSBuZXcgTWVkaWEodGhpcy5jbGllbnQpO1xuICAgIHRoaXMuYWlycG9ydCAgICAgICAgPSBuZXcgQWlycG9ydCh0aGlzLmNsaWVudCk7XG4gICAgdGhpcy5wYWdpbmF0aW9uICAgICA9IG5ldyBQYWdpbmF0aW9uKHRoaXMuY2xpZW50KTtcbiAgICB0aGlzLnNhZmV0eSAgICAgICAgID0gbmV3IFNhZmV0eSh0aGlzLmNsaWVudCk7XG4gICAgdGhpcy5zY2hlZHVsZSAgICAgICA9IG5ldyBTY2hlZHVsZSh0aGlzLmNsaWVudCk7XG4gICAgdGhpcy5hbmFseXRpY3MgICAgICA9IG5ldyBBbmFseXRpY3ModGhpcy5jbGllbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBwcmV2aW91cyBwYWdlIGZvciB0aGUgZ2l2ZW4gcmVzcG9uc2UuIFJlc29sdmVzIHRvIG51bGwgaWYgdGhlIHBhZ2VcbiAgICogY291bGQgbm90IGJlIGZvdW5kLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLnJlZmVyZW5jZURhdGEubG9jYXRpb25zLmdldCh7XG4gICAqICAga2V5d29yZDogJ0xPTicsXG4gICAqICAgc3ViVHlwZTogJ0FJUlBPUlQsQ0lUWScsXG4gICAqICAgcGFnZTogeyBvZmZzZXQ6IDIgfVxuICAgKiB9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICogICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAqICAgcmV0dXJuIGFtYWRldXMucHJldmlvdXMocmVzcG9uc2UpO1xuICAgKiB9KS50aGVuKGZ1bmN0aW9uKHByZXZpb3VzUGFnZSl7XG4gICAqICAgY29uc29sZS5sb2cocHJldmlvdXNQYWdlKTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gcmVzcG9uc2UgdGhlIHByZXZpb3VzIHJlc3BvbnNlIGZvciBhbiBBUEkgY2FsbFxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBCbHVlYmlyZCBQcm9taXNlXG4gICAqL1xuICBwcmV2aW91cyhyZXNwb25zZSkgeyByZXR1cm4gdGhpcy5wYWdpbmF0aW9uLnBhZ2UoJ3ByZXZpb3VzJywgcmVzcG9uc2UpOyB9XG5cbiAgLyoqXG4gICAqIFRoZSBuZXh0IHBhZ2UgZm9yIHRoZSBnaXZlbiByZXNwb25zZS4gUmVzb2x2ZXMgdG8gbnVsbCBpZiB0aGUgcGFnZSBjb3VsZFxuICAgKiBub3QgYmUgZm91bmQuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMucmVmZXJlbmNlRGF0YS5sb2NhdGlvbnMuZ2V0KHtcbiAgICogICBrZXl3b3JkOiAnTE9OJyxcbiAgICogICBzdWJUeXBlOiAnQUlSUE9SVCxDSVRZJ1xuICAgKiB9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICogICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAqICAgcmV0dXJuIGFtYWRldXMubmV4dChyZXNwb25zZSk7XG4gICAqIH0pLnRoZW4oZnVuY3Rpb24obmV4dFBhZ2Upe1xuICAgKiAgIGNvbnNvbGUubG9nKG5leHRQYWdlKTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gcmVzcG9uc2UgdGhlIHByZXZpb3VzIHJlc3BvbnNlIGZvciBhbiBBUEkgY2FsbFxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBCbHVlYmlyZCBQcm9taXNlXG4gICAqL1xuICBuZXh0KHJlc3BvbnNlKSAgICAgeyByZXR1cm4gdGhpcy5wYWdpbmF0aW9uLnBhZ2UoJ25leHQnLCByZXNwb25zZSk7IH1cblxuICAvKipcbiAgICogVGhlIGZpcnN0IHBhZ2UgZm9yIHRoZSBnaXZlbiByZXNwb25zZS4gUmVzb2x2ZXMgdG8gbnVsbCBpZiB0aGUgcGFnZVxuICAgKiBjb3VsZCBub3QgYmUgZm91bmQuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMucmVmZXJlbmNlRGF0YS5sb2NhdGlvbnMuZ2V0KHtcbiAgICogICBrZXl3b3JkOiAnTE9OJyxcbiAgICogICBzdWJUeXBlOiAnQUlSUE9SVCxDSVRZJyxcbiAgICogICBwYWdlOiB7IG9mZnNldDogMiB9XG4gICAqIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgKiAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICogICByZXR1cm4gYW1hZGV1cy5maXJzdChyZXNwb25zZSk7XG4gICAqIH0pLnRoZW4oZnVuY3Rpb24oZmlyc3RQYWdlKXtcbiAgICogICBjb25zb2xlLmxvZyhmaXJzdFBhZ2UpO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSByZXNwb25zZSB0aGUgcHJldmlvdXMgcmVzcG9uc2UgZm9yIGFuIEFQSSBjYWxsXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIEJsdWViaXJkIFByb21pc2VcbiAgICovXG4gIGZpcnN0KHJlc3BvbnNlKSAgICB7IHJldHVybiB0aGlzLnBhZ2luYXRpb24ucGFnZSgnZmlyc3QnLCByZXNwb25zZSk7IH1cblxuICAvKipcbiAgICogVGhlIGxhc3QgcGFnZSBmb3IgdGhlIGdpdmVuIHJlc3BvbnNlLiBSZXNvbHZlcyB0byBudWxsIGlmIHRoZSBwYWdlXG4gICAqIGNvdWxkIG5vdCBiZSBmb3VuZC5cbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmxvY2F0aW9ucy5nZXQoe1xuICAgKiAgIGtleXdvcmQ6ICdMT04nLFxuICAgKiAgIHN1YlR5cGU6ICdBSVJQT1JULENJVFknXG4gICAqIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgKiAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICogICByZXR1cm4gYW1hZGV1cy5sYXN0KHJlc3BvbnNlKTtcbiAgICogfSkudGhlbihmdW5jdGlvbihsYXN0UGFnZSl7XG4gICAqICAgY29uc29sZS5sb2cobGFzdFBhZ2UpO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSByZXNwb25zZSB0aGUgcHJldmlvdXMgcmVzcG9uc2UgZm9yIGFuIEFQSSBjYWxsXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIEJsdWViaXJkIFByb21pc2VcbiAgICovXG4gIGxhc3QocmVzcG9uc2UpICAgICB7IHJldHVybiB0aGlzLnBhZ2luYXRpb24ucGFnZSgnbGFzdCcsIHJlc3BvbnNlKTsgfVxufVxuXG5cbi8qKlxuICogQSBoYW5keSBsaXN0IG9mIGxvY2F0aW9uIHR5cGVzLCB0byBiZSB1c2VkIGluIHRoZSBsb2NhdGlvbnMgQVBJOlxuICpcbiAqIGBgYGpzXG4gKiBhbWFkZXVzLnJlZmVyZW5jZURhdGEubG9jYXRpb24uZ2V0KHtcbiAqICAga2V5d29yZDogJ2xvbicsXG4gKiAgIHN1YlR5cGU6IEFtYWRldXMubG9jYXRpb24uYW55XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEN1cnJlbnRseSBhdmFpbGFibGUgYXJlIHRoZSB0eXBlcyBgLmFpcnBvcnRgLCBgLmNpdHlgLCBhbmQgYC5hbnlgXG4gKi9cbkFtYWRldXMubG9jYXRpb24gPSB7XG4gIGFpcnBvcnQ6ICdBSVJQT1JUJyxcbiAgY2l0eTogJ0NJVFknLFxuICBhbnk6ICdBSVJQT1JULENJVFknXG59O1xuXG4vKipcbiAqIEEgaGFuZHkgbGlzdCBvZiBkaXJlY3Rpb24gdHlwZXMsIHRvIGJlIHVzZWQgaW4gdGhlIEZsaWdodCBCdXNpZXN0IFBlcmlvZCBBUEk6XG4gKlxuICogYGBganNcbiAqIGFtYWRldXMudHJhdmVsLmFuYWx5dGljcy5haXJUcmFmZmljLmJ1c2llc3RQZXJpb2QuZ2V0KHtcbiAqICAgY2l0eUNvZGU6ICdwYXInLFxuICogICBwZXJkaW9kOiAyMDE1LFxuICogICBkaXJlY3Rpb246IEFtYWRldXMuZGlyZWN0aW9uLmFycml2aW5nXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEN1cnJlbnRseSBhdmFpbGFibGUgYXJlIHRoZSB0eXBlcyBgLmFycml2aW5nYCBhbmQgYC5kZXBhcnRpbmdgXG4gKi9cblxuQW1hZGV1cy5kaXJlY3Rpb24gPSB7XG4gIGFycml2aW5nOiAnQVJSSVZJTkcnLFxuICBkZXBhcnRpbmc6ICdERVBBUlRJTkcnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBbWFkZXVzO1xuIl19